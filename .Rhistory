# Créer un vecteur de données
x <- c(3, 5, 6, 7, 8, 9, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20)
# Créer un histogramme avec 5 classes
hist(x, breaks = 5, main = "Histogramme de x", xlab = "Valeur de x", ylab = "Fréquence")
# Créer un vecteur de données
x <- c(3, 5, 6, 7, 8, 9, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20)
# Créer un histogramme avec 5 classes
hist(x, breaks = 5, freq=F)
# Créer un vecteur de données
x <- c(3, 5, 6, 7, 8, 9, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20)
# Créer un histogramme avec 5 classes
hist(x, breaks = 5, freq=F, ylab = "Densité", xlab = "Valeur de x")
lines(density(x), col="green")
hist
# Créer un vecteur de données
x <- c(3, 5, 6, 7, 8, 9, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20)
# Créer un histogramme avec 5 classes
hist(x, breaks = 5, freq=F, main = "Histogramme de x", ylab = "Densité", xlab = "Valeur de x")
lines(density(x), col="green")
# Créer un vecteur de données
x <- c(3, 5, 6, 7, 8, 9, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20)
# Créer un histogramme avec 5 classes
hist <- hist(x, breaks = 5, freq=F, main = "Histogramme de x", ylab = "Densité", xlab = "Valeur de x")
hist
# Créer un vecteur de données
x <- c(3, 5, 6, 7, 8, 9, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20)
# Créer un histogramme avec 5 classes
hist <- hist(x, breaks = 5, freq=F, main = "Histogramme de x", ylab = "Densité", xlab = "Valeur de x")
hist
# Créer un vecteur de données
x <- c(3, 5, 6, 7, 8, 9, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20)
# Créer un histogramme avec 5 classes
hist <- hist(x, breaks = 5, freq=F, main = "Histogramme de x", ylab = "Densité", xlab = "Valeur de x")
hist
# Créer une matrice de données
mat <- matrix(c(2, 3, 5, 4, 6, 8), nrow = 2, byrow = TRUE)
rownames(mat) <- c("Hommes", "Femmes")
colnames(mat) <- c("Groupe A", "Groupe B", "Groupe C")
# Créer un graphique à barres
barplot(mat, main = "Graphique à barres", xlab = "Groupes", ylab = "Mesures",
col = c("red", "blue"), legend.text = rownames(mat))
View(mat)
# Créer une matrice de données
data <- matrix(c(2, 4, 3, 5, 1, 4, 2, 3, 4), nrow = 1)
# Créer un graphique en étoiles
stars(data, main = "Graphique en étoiles", col.lines = "blue", col.segments = "red", lty.segments = 2, lwd.segments = 2)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
View(mtcars2)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Tracer un graphique en étoile
palette(rainbow(5))
stars(mtcars2_norm, main = "Profil des voitures")
View(mtcars2_norm)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Générer des données aléatoires
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
z <- outer(x, y, function(x, y) sin(sqrt(x^2 + y^2))/sqrt(x^2 + y^2))
# Tracer les courbes de niveau avec contour()
contour(x, y, z, levels = seq(-1, 1, length.out = 20), col = heat.colors(20))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
par(mfrow=c(1,2))
# Générer des données aléatoires
x <- seq(-5, 5, length.out = 100)
y <- seq(-5, 5, length.out = 100)
z <- outer(x, y, function(x, y) sin(sqrt(x^2 + y^2))/sqrt(x^2 + y^2))
# Tracer les courbes de niveau avec contour()
contour(x, y, z, levels = seq(-1, 1, length.out = 20), col = heat.colors(20))
# Tracer les courbes de niveau avec filled.contour()
filled.contour(x, y, z, color.palette = heat.colors, nlevels = 20)
source("~/.active-rstudio-document")
data("volcano")
force(volcano)
View(volcano)
# Tracer les courbes de niveau et afficher la carte de couleurs
contour(z, levels = seq(90, 200, by = 10), col = "black", lwd = 2)
image(z, col = terrain.colors(100), add = TRUE)
# Tracer les courbes de niveau et afficher la carte de couleurs
contour(volcano, levels = seq(90, 200, by = 10), col = "black", lwd = 2)
image(volcano, col = terrain.colors(100), add = TRUE)
# Tracer les courbes de niveau et afficher la carte de couleurs
contour(volcano, levels = seq(90, 200, by = 10), col = "black", lwd = 2)
#image(volcano, col = terrain.colors(100), add = TRUE)
View(volcano)
source("~/.active-rstudio-document")
install.packages("oceanmap")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
bookdown:::render_book()
bookdown:::render_book()
rmarkdown::render_site(output_format = 'bookdown::pdf_book', encoding = 'UTF-8')
rmarkdown::render_site(output_format = 'bookdown::pdf_book', encoding = 'UTF-8')
#chargement du jeu de données avec l'aide de la fonction data
dataset <- data("mtcars")
#Affiche les dimensions du jeu de données
dim(dataset)
#Affiche la structure du jeu de données
str(dataset)
#Affiche les premières lignes du jeu de données
head(dataset)
#Affiche les stat descriptives sur le jeu de données
summary(dataset)
#chargement du jeu de données avec l'aide de la fonction data
dataset <- data(mtcars)
#Affiche les dimensions du jeu de données
dim(dataset)
#Affiche la structure du jeu de données
str(dataset)
#Affiche les premières lignes du jeu de données
head(dataset)
#Affiche les stat descriptives sur le jeu de données
summary(dataset)
#chargement du jeu de données avec l'aide de la fonction data
dataset <- data(mtcars)
#Affiche les dimensions du jeu de données
dim(dataset)
#Affiche la structure du jeu de données
str(dataset)
#Affiche les premières lignes du jeu de données
head(dataset)
#Affiche les stat descriptives sur le jeu de données
summary(dataset)
#chargement du jeu de données avec l'aide de la fonction data
data("mtcars")
#Affiche les dimensions du jeu de données
dim(dataset)
#Affiche la structure du jeu de données
str(dataset)
#Affiche les premières lignes du jeu de données
head(dataset)
#Affiche les stat descriptives sur le jeu de données
summary(dataset)
#chargement du jeu de données avec l'aide de la fonction data
data("mtcars")
#Affiche les dimensions du jeu de données
dim(mtcars)
#Affiche la structure du jeu de données
str(mtcars)
#Affiche les premières lignes du jeu de données
head(mtcars)
#Affiche les stat descriptives sur le jeu de données
summary(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt")
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = TRUE)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
View(mtcars)
rownames(mtcars)
#add new column as row.names
mtcars$rownames <- row.names(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#add new column as row.names
mtcars$rownames <- row.names(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#add new column as row.names
mtcars$'' <- row.names(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#add new column as row.names
mtcars$'' <- row.names(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#add new column as row.names
mtcars$'' <- row.names(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#add new column as row.names
mtcars$'' <- row.names(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#add new column as row.names
mtcars$rownames <- row.names(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#add new column as row.names
mtcars$rownames <- row.names(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#add new column as row.names
mtcars$rownames <- row.names(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#chargement du jeu de données avec l'aide de la fonction data
data("mtcars")
#Affiche les dimensions du jeu de données
dim(mtcars)
#Affiche la structure du jeu de données
str(mtcars)
#Affiche les premières lignes du jeu de données
head(mtcars)
#Affiche les stat descriptives sur le jeu de données
summary(mtcars)
#add new column as row.names
mtcars$'' <- row.names(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#chargement du jeu de données avec l'aide de la fonction data
data("mtcars")
#Affiche les dimensions du jeu de données
dim(mtcars)
#Affiche la structure du jeu de données
str(mtcars)
#Affiche les premières lignes du jeu de données
head(mtcars)
#Affiche les stat descriptives sur le jeu de données
summary(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = FALSE)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = TRUE)
#chargement du jeu de données avec l'aide de la fonction data
data("mtcars")
#Affiche les dimensions du jeu de données
dim(mtcars)
#Affiche la structure du jeu de données
str(mtcars)
#Affiche les premières lignes du jeu de données
head(mtcars)
#Affiche les stat descriptives sur le jeu de données
summary(mtcars)
#export du df mtcars
write.table(x = mtcars, file = "./mtcars.txt", row.names = TRUE)
#export du df mtcars
write.csv(x = mtcars, file = "./mtcars.csv", row.names = TRUE)
#import du fichier mtcars2sous R
mtcars_new <- `read.csv("./mtcars2.csv", sep = "\t")
#import du fichier mtcars2sous R
mtcars_new <- read.csv("./mtcars2.csv", sep = "\t")
View(mtcars_new)
rownames(mtcars_new)
#import du fichier mtcars2sous R
mtcars_new <- read.csv("./mtcars2.csv", sep = "\t")
#Affiche les dimensions du jeu de données
dim(mtcars_new)
#Affiche la structure du jeu de données
str(mtcars_new)
#affecter la marque de voitures comme index du df
row.names(mtcars_new) <- mtcars_new$X
mtcars_new$X <- NULL
View(mtcars_new)
View(mtcars_new)
data("ChickWeight")
setwd('../R_Banyuls (exercices_solutions)/')
plot(iris$Petal.Length, iris$Petal.Width,
xlab = "Longueur du pétale (cm)",
ylab = "Largeur du pétale (cm)",
title = "Relation entre la Longeur du pétale et la largeur du pétale")
plot(iris$Petal.Length, iris$Petal.Width,
xlab = "Longueur du pétale (cm)",
ylab = "Largeur du pétale (cm)",
main = "Relation entre la Longeur du pétale et la largeur du pétale")
# Simuler des données pour la température de l'eau dans le lac
x <- seq(0, 1000, by = 100)
y <- seq(0, 1000, by = 100)
z <- matrix(rnorm(100*100, mean = 20, sd = 5), nrow = 100, ncol = 100)
# Créer le graphique de contour
contour(x, y, z, levels = seq(10, 30, 2), col = "blue")
# Simuler des données pour la température de l'eau dans le lac
x <- seq(0, 1000, by = 100)
y <- seq(0, 1000, by = 100)
z <- matrix(rnorm(100*100, mean = 20, sd = 5), nrow = 100, ncol = 100)
# Vérifier les dimensions de la grille de données
dim(x)
dim(y)
dim(z)
# Créer le graphique de contour
contour(x, y, z, levels = seq(10, 30, 2), col = "blue")
# Simuler des données pour la température de l'eau dans le lac
x <- seq(0, 1000, by = 100)
y <- seq(0, 1000, by = 100)
z <- matrix(rnorm(100*100, mean = 20, sd = 5), nrow = 100, ncol = 100)
# Vérifier les dimensions de la grille de données(x)
dim(y)
dim(z)
# Créer le graphique de contour
contour(x, y, z, levels = seq(10, 30, 2), col = "blue")
# Exemple 1 : données de température simulées dans un lac
x <- seq(0, 1000, by = 100)
y <- seq(0, 1000, by = 100)
z <- matrix(rnorm(100*100, mean = 20, sd = 5), nrow = 100, ncol = 100)
# Vérifier les longueurs de x, y et les dimensions de z
length(x) # renvoie 11
length(y) # renvoie 11
dim(z)    # renvoie 100 100
# Créer le graphique de contour
contour(x, y, z, levels = seq(10, 30, 2), col = "blue")
# Exemple 1 : données de température simulées dans un lac
x <- seq(0, 1000, by = 10)
y <- seq(0, 1000, by = 100)
z <- matrix(rnorm(100*100, mean = 20, sd = 5), nrow = 100, ncol = 100)
# Exemple 1 : données de température simulées dans un lac
x <- seq(0, 1000, by = 11)
y <- seq(0, 1000, by = 100)
z <- matrix(rnorm(100*100, mean = 20, sd = 5), nrow = 100, ncol = 100)
# Exemple 1 : données de température simulées dans un lac
x <- seq(0, 1000, by = 9)
y <- seq(0, 1000, by = 100)
z <- matrix(rnorm(100*100, mean = 20, sd = 5), nrow = 100, ncol = 100)
# Exemple 1 : données de température simulées dans un lac
x <- seq(0, 999, by = 10)
y <- seq(0, 1000, by = 100)
z <- matrix(rnorm(100*100, mean = 20, sd = 5), nrow = 100, ncol = 100)
# Exemple 1 : données de température simulées dans un lac
x <- seq(0, 999, by = 10)
y <- seq(0, 999, by = 10)
z <- matrix(rnorm(100*100, mean = 20, sd = 5), nrow = 100, ncol = 100)
# Exemple 1 : données de température simulées dans un lac
x <- seq(0, 999, by = 10)
y <- seq(0, 999, by = 10)
z <- matrix(rnorm(100*100, mean = 20, sd = 5), nrow = 100, ncol = 100)
# Exemple 1 : données de température simulées dans un lac
x <- seq(0, 999, by = 10)
y <- seq(0, 999, by = 10)
z <- matrix(rnorm(100*100, mean = 20, sd = 5), nrow = 100, ncol = 100)
# Vérifier les longueurs de x, y et les dimensions de z
length(x)
length(y) # renvoie 11
dim(z)    # renvoie 100 100
# Créer le graphique de contour
contour(x, y, z, levels = seq(10, 30, 2), col = "blue")
# Créer le graphique de contour rempli
filled.contour(x, y, z, levels = seq(10, 30, 2), col = terrain.colors(20))
z
# Color palette
cols <- hcl.colors(10, "YlOrRd")
contour(volcano,
col = cols)
data(volcano)
# Color palette
cols <- hcl.colors(10, "YlOrRd")
contour(volcano,
col = cols)
data(volcano)
# Color palette
cols <- hcl.colors(10, "YlOrRd")
contour(volcano,
col = cols)
filled.contour(volcano,
nlevels = 10)
data(volcano)
par(mfrow = c(1,2))
# Color palette
cols <- hcl.colors(10, "YlOrRd")
contour(volcano,
col = cols)
filled.contour(volcano,
nlevels = 10)
data(volcano)
par(mfrow = c(1,2))
# Color palette
cols <- hcl.colors(10, "YlOrRd")
contour(volcano,
col = cols)
filled.contour(volcano,
nlevels = 10)
data(volcano)
# Color palette
cols <- hcl.colors(10, "YlOrRd")
contour(volcano,
col = cols)
filled.contour(volcano,
nlevels = 10)
install.packages("maps")
install.packages("mapdata")
install.packages("ggplot2")
library(maps)
library(mapdata)
library(ggplot2)
set.seed(123)
temp_data <- data.frame(
city = c("Paris", "Madrid", "Berlin", "Athens", "Rome"),
temp = rnorm(5, 12, 2)
)
View(temp_data)
install.packages("maps")
install.packages("mapdata")
install.packages("ggplot2")
library(maps)
library(mapdata)
library(ggplot2)
# Simulation des données de température
set.seed(123)
temp_data <- data.frame(
city = c("Paris", "Madrid", "Berlin", "Athens", "Rome"),
temp = rnorm(5, 12, 2)
)
# Créer une carte de l'Europe
map("world2", region="Europe", col="lightgray", fill=TRUE, bg="white", ylim=c(35, 75))
install.packages("maps")
install.packages("mapdata")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("maps")
install.packages("mapdata")
install.packages("ggplot2")
library(maps)
library(mapdata)
library(ggplot2)
# Simulation des données de température
set.seed(123)
temp_data <- data.frame(
city = c("Paris", "Madrid", "Berlin", "Athens", "Rome"),
temp = rnorm(5, 12, 2)
)
# Créer une carte de l'Europe
map("world2", region="Europe", col="lightgray", fill=TRUE, bg="white", ylim=c(35, 75))
# Créer une carte de l'Europe
map("world2", region="Europe", col="lightgray", fill=TRUE, bg="white", ylim=c(35, 75))
install.packages("maps")
install.packages("mapdata")
install.packages("ggplot2")
library(maps)
library(mapdata)
library(ggplot2)
# Simulation des données de température
set.seed(123)
temp_data <- data.frame(
city = c("Paris", "Madrid", "Berlin", "Athens", "Rome"),
temp = rnorm(5, 12, 2)
)
# Créer une carte de l'Europe
map(database = "world", regions="Europe", col="lightgray", fill=TRUE, bg="white", ylim=c(35, 75))
# Créer une carte de l'Europe
map(database = "world","Europe", col="lightgray", fill=TRUE, bg="white", ylim=c(35, 75))
# Créer une carte de l'Europe
map(database = "world","France", col="lightgray", fill=TRUE, bg="white", ylim=c(35, 75))
# Créer une carte de l'Europe
map(database = "world","EU", col="lightgray", fill=TRUE, bg="white", ylim=c(35, 75))
install.packages("leaflet")
install.packages("leaflet")
library(leaflet)
library(leaflet)
url <- "https://population.un.org/wup/Download/Files/WUP2018-F11-Cities_Over_300K.xls"
filename <- "world_cities_population.xls"
if (!file.exists(filename)) download.file(url, destfile = filename)
library(leaflet)
url <- "https://population.un.org/wup/Download/Files/WUP2018-F12-Cities_Over_300K.xls"
filename <- "world_cities_population.xls"
if (!file.exists(filename)) download.file(url, destfile = filename)
library(leaflet)
url <- "https://population.un.org/wup/Download/Files/WUP2018-F12-Cities_Over_300K.xls"
filename <- "world_cities_population.xls"
if (!file.exists(filename)) download.file(url, destfile = filename)
download.file(url, destfile = filename)
url
download.file(url)
download.file(url, destfile = "tmp")
library(leaflet)
url <- "https://population.un.org/wup/Download/Files/WUP2018-F12-Cities_Over_300K.xls"
filename <- "world_cities_population.xls"
download.file(url, destfile = filename)
library(leaflet)
url <- "https://population.un.org/wup/Download/Files/WUP2018-F12-Cities_Over_300K.xls"
filename <- "world_cities_population.xls"
download.file(url, destfile = filename)
library(leaflet)
url <- "https://population.un.org/wup/Download/Files/WUP2018-F12-Cities_Over_300K.xls"
filename <- "world_cities_population.xls"
if (!file.exists(filename)) download.file(url, destfile = filename)
city_pop <- readxl::read_excel(filename, sheet = 1, skip = 16)
filename <- "~/Téléchargements/WUP2018-F12-Cities_Over_300K.xls"
city_pop <- readxl::read_excel(filename, sheet = 1, skip = 16)
city_pop <- city_pop[, c("City", "Latitude", "Longitude", "2018")]
library(leaflet)
filename <- "~/Téléchargements/WUP2018-F12-Cities_Over_300K.xls"
city_pop <- readxl::read_excel(filename, sheet = 1, skip = 16)
city_pop <- city_pop[, c("Country or area", "Latitude", "Longitude", "2020")]
colnames(city_pop) <- c("city", "lat", "lon", "pop")
big_cities <- subset(city_pop, pop >= 10000000)
leaflet(data = big_cities) %>%
addTiles() %>%
addMarkers(~lon, ~lat, popup = ~paste(city, "<br>", pop, "million people")) %>%
setView(lng = 0, lat = 20, zoom = 2)
bookdown:::render_book()
bookdown:::render_book()
bookdown:::render_book()
knitr::write_bib(c("R", "RStudio", "ggplot2", "maps"))
knitr::write_bib(c("R-base", "RStudio", "ggplot2", "maps"))
knitr::write_bib(c("r-base", "RStudio", "ggplot2", "maps"))
knitr::write_bib(c("base", "RStudio", "ggplot2", "maps"))
knitr::write_bib(c("base", "ggplot2", "maps"))
bookdown:::render_book()
bookdown:::render_book()
bookdown:::render_book()
bookdown:::render_book()
bookdown:::render_book()
bookdown:::render_book()
bookdown:::render_book()
bookdown:::render_book()
bookdown:::render_book()
bookdown:::render_book()
bookdown:::render_book()
bookdown:::render_book()
